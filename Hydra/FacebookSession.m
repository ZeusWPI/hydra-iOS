//
//  FacebookLogin.m
//  Hydra
//
//  Created by Feliciaan De Palmenaer on 7/01/13.
//  Copyright (c) 2013 Zeus WPI. All rights reserved.
//

#import "FacebookSession.h"
#import <FacebookSDK/FacebookSDK.h>

// Generated by visiting https://graph.facebook.com/oauth/access_token?client_id=_&client_secret=_&grant_type=client_credentials
#define kAppAccessToken @"146947948791011|QqOR99OREkC_vAvOkfJm2tp-02k"

NSString *const FacebookSessionStateChangedNotification =
    @"FacebookSessionStateChangedNotification";
NSString *const FacebookUserInfoUpdatedNotifcation =
    @"FacebookUserInfoUpdatedNotifcation";

@interface FacebookSession ()

@property (nonatomic, strong) NSString *appAccessToken;
@property (nonatomic, strong) id<FBGraphUser> userInfo;

@end

@implementation FacebookSession

+ (FacebookSession *)sharedSession
{
    static FacebookSession *sharedInstance = nil;
    if (!sharedInstance) {
        sharedInstance = [[FacebookSession alloc] init];
    }
    return sharedInstance;
}

#pragma mark - Session management

- (BOOL)openWithAllowLoginUI:(BOOL)allowLoginUI
{
    FBSessionStateHandler handler = ^(FBSession *session, FBSessionState state, NSError *error) {
        [self sessionStateChanged:session state:state error:error];
    };

    return [FBSession openActiveSessionWithReadPermissions:nil
                                              allowLoginUI:allowLoginUI
                                         completionHandler:handler];
}

- (void)close
{
    [[FBSession activeSession] closeAndClearTokenInformation];
}

- (BOOL)open
{
    return [[FBSession activeSession] isOpen];
}

- (void)sessionStateChanged:(FBSession *)session state:(FBSessionState)state error:(NSError *)error
{
    DLog(@"%@", session);

    switch (state) {
        case FBSessionStateClosed:
        case FBSessionStateClosedLoginFailed:
            self.userInfo = nil;
            [[FBSession activeSession] closeAndClearTokenInformation];
            break;
        default:
            break;
    }

    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center postNotificationName:FacebookSessionStateChangedNotification object:session];

    // TODO: show error message on failure?
    /*if (error) {
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Error: %@",
                                                                     [FacebookSession descriptionForErrorCode:error.code]]
                                                            message:error.localizedDescription
                                                           delegate:nil
                                                  cancelButtonTitle:@"OK"
                                                  otherButtonTitles:nil];
        [alertView show];
    }*/
}

#pragma mark - User info

- (id<FBGraphUser>)userInfo
{
    if (self.open && !_userInfo) {
        [self updateUserInfo];
    }
    return _userInfo;
}

- (void)updateUserInfo
{
    FBRequest *request = [FBRequest requestForMe];
    [request startWithCompletionHandler:^(FBRequestConnection *c, id result, NSError *error) {
        if (error) {
            NSLog(@"Error while fetching user information: %@", [error localizedDescription]);
        }
        else {
            self.userInfo = result;

            NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
            [center postNotificationName:FacebookUserInfoUpdatedNotifcation object:result];
        }
    }];
}

#pragma mark - Request helpers

- (FBRequest *)requestWithGraphPath:(NSString *)path parameters:(NSDictionary *)parameters
{
    return [self requestWithGraphPath:path parameters:parameters HTTPMethod:@"GET"];
}

- (FBRequest *)requestWithQuery:(NSString *)query
{
    return [self requestWithGraphPath:@"/fql" parameters:@{@"q": query} HTTPMethod:@"GET"];
}

- (FBRequest *)requestWithGraphPath:(NSString *)path parameters:(NSDictionary *)parameters HTTPMethod:(NSString *)method
{
    FBSession *session = [FBSession activeSession];

    // If there's no session, try accessing the resource with the app token
    if (![session isOpen] && ![FBSession openActiveSessionWithAllowLoginUI:NO]) {
        NSMutableDictionary *mutableParams = [parameters mutableCopy];
        if (!mutableParams) {
            mutableParams = [NSMutableDictionary dictionary];
        }
        mutableParams[@"access_token"] = kAppAccessToken;

        session = nil;
        parameters = mutableParams;
    }

    return [[FBRequest alloc] initWithSession:session graphPath:path
                                   parameters:parameters HTTPMethod:method];
}

/*


+ (NSString *)FBErrorCodeDescription:(FBErrorCode) code
{
    switch(code){
        case FBErrorInvalid :{
            return @"FBErrorInvalid";
        }
        case FBErrorOperationCancelled:{
            return @"FBErrorOperationCancelled";
        }
        case FBErrorLoginFailedOrCancelled:{
            return @"FBErrorLoginFailedOrCancelled";
        }
        case FBErrorRequestConnectionApi:{
            return @"FBErrorRequestConnectionApi";
        }case FBErrorProtocolMismatch:{
            return @"FBErrorProtocolMismatch";
        }
        case FBErrorHTTPError:{
            return @"FBErrorHTTPError";
        }
        case FBErrorNonTextMimeTypeReturned:{
            return @"FBErrorNonTextMimeTypeReturned";
        }
        case FBErrorNativeDialog:{
            return @"FBErrorNativeDialog";
        }
        default:
            return @"[Unknown]";
    }
}*/

@end
