//
//  FacebookSession.swift
//  Hydra
//
//  Created by Feliciaan De Palmenaer on 03/03/2016.
//  Copyright Â© 2016 Zeus WPI. All rights reserved.
//

import Foundation
import FBSDKCoreKit
import FBSDKLoginKit
import FBSDKShareKit

// Generated by visiting https://graph.facebook.com/oauth/access_token?client_id=_&client_secret=_&grant_type=client_credentials
let kAppAccessToken = "146947948791011|QqOR99OREkC_vAvOkfJm2tp-02k"
let FacebookSessionStateChangedNotification = "FacebookSessionStateChangedNotification"
let FacebookUserInfoUpdatedNotifcation = "FacebookUserInfoUpdatedNotifcation"

class FacebookSession: NSObject {

    static var sharedSession = FacebookSession()

    override init() {

    }

    var open: Bool = false
    var userInfo: FacebookUser?

    func openWithAllowLoginUI(allowLoginUI: Bool, completion: (()->Void)? = nil) {
        let userLoggedIn = PreferencesService.sharedService().userLoggedInToFacebook
        if !allowLoginUI && !userLoggedIn {
            return
        }
        if FBSDKAccessToken.currentAccessToken() != nil {
            self.open = true
            self.updateUserInfo()
            return
        }
        let login = FBSDKLoginManager()
        login.logInWithReadPermissions(["public_profile", "user_friends"]) { (result, error) -> Void in
            if let error = error{
                // Handle error
                let delegate = UIApplication.sharedApplication().delegate as! AppDelegate
                delegate.handleError(error)

                self.open = false
            } else {
                if result.isCancelled || result.declinedPermissions.contains("public_profile") {
                    // HANDLE DECLINED SHIT
                    self.open = false
                    PreferencesService.sharedService().userLoggedInToFacebook = false
                } else {
                    // HANDLE WINNING
                    self.updateUserInfo()
                    self.open = true
                    PreferencesService.sharedService().userLoggedInToFacebook = true
                }
            }

            let center = NSNotificationCenter.defaultCenter()
            center.postNotificationName(FacebookSessionStateChangedNotification, object: nil)
        }
    }

    func close() {
        let manager = FBSDKLoginManager()
        manager.logOut()
        self.open = false
    }

    private func updateUserInfo() {
        if FBSDKAccessToken.currentAccessToken() != nil {
            requestWithGraphPath("me", parameters: [:], completionHandler: { (result) -> Void in
                let userName = result.valueForKey("name") as! String
                let userId = result.valueForKey("id") as! String

                self.userInfo = FacebookUser(name: userName, id: userId)
            })
        }
    }

    func requestWithQuery(query: String, completionHandler: ((AnyObject)->Void)?) {
        // TODO: change all fql request to open graph request (fix before 7 august 2016)
        self.requestWithGraphPath("/v2.0/fql", parameters: ["q": query], completionHandler: completionHandler)
    }

    func requestWithGraphPath(path: String, var parameters: [NSObject: AnyObject], HTTPMethod: String = "GET", completionHandler: ((AnyObject)-> Void)? ) {
        if FBSDKAccessToken.currentAccessToken() == nil {
            parameters["access_token"] = kAppAccessToken
        }

        FBSDKGraphRequest(graphPath: path, parameters: parameters, HTTPMethod: HTTPMethod).startWithCompletionHandler { (connection, obj, err) -> Void in
            if let error = err {
                let app = UIApplication.sharedApplication().delegate as! AppDelegate
                app.handleError(error)
                print("An error occured", error)
            }
            if let obj = obj {
                if let completionHandler = completionHandler {
                    completionHandler(obj)
                }
            }
        }

    }
}

@objc class FacebookUser: NSObject { // Use class because it's used in Obj-C
    let name: String
    let id: String

    init(name: String, id: String) {
        self.name = name
        self.id = id
    }
}